# Default values for opentsdb
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# image - The base opentsdb image to use for all components.
# for default see https://github.com/Gradiant/dockerized-opentsdb
image:
  repository: gradiant/opentsdb
  tag: 2.4.0
  pullPolicy: IfNotPresent

# hbaseImage -- container umage used to run hbase client shell to create
# initial opentsdb tables
hbaseImage:
  repository: gradiant/hbase-base
  tag: 2.0.1

# hbaseConfigMapName -- name of the configmap used to fetch hbase configuration
# default hbaseConfigMapName is {{ .Release.Name}}-hbase
hbaseConfigMapName:

# antiAffinity -- Select antiAffinity as either hard or soft, default is 'soft'
# 'hard' is for production setups
antiAffinity: "soft"

# daemons -- Initial number of tsd replicas
daemons: 1
# port -- expose port when using nodePort
port: 4242

nodePort:
  # nodePort.enabled -- set to 'true' to change to nodeport instead of ClusterIP
  enabled: false
  # nodePort.externalPort -- sport to use to expose service
  externalPort: 31042

# pass env vars to the opentsdb or init-container
env:
  # env.init -- values for init container when creating hbase tables
  init:
    # BLOOMFILTER: 'ROW'
    # META_TABLE: 'tsdb-meta'
    # TREE_TABLE: 'tsdb-tree'
    # TSDB_TABLE: 'tsdb'
    # UID_TABLE: tsdb-uid'
    COMPRESSION: "GZ"  # Use one of LZO ZSTD GZ LZ4 NONE Algorithm BZIP2 SNAPPY
    # TSDB_TTL: 'FOREVER'
    # DATA_BLOCK_ENCODING: 'DIFF'
  # env.opentsdb -- env values to pass to opentsdb, for example JAVA_OPTS
  opentsdb:

# init_hbase_script -- hbase init script to create hbase tables,
# where $VARS are env vars from env.init (above), if empty then default will be used
init_hbase_script: |
  create '$UID_TABLE',
  {NAME => 'id', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER'},
  {NAME => 'name', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER'}
  create '$TSDB_TABLE',
  {NAME => 't', VERSIONS => 1, COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER'}
  create '$TREE_TABLE',
  {NAME => 't', VERSIONS => 1, COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER'}
  create '$META_TABLE',
  {NAME => 'name', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER'}

# conf -- configure /etc/opentsdb/opentsdb.conf contents
conf:
  # tsd.storage.hbase.zk_quorum -- default is "{{.Release.Name}}-zookeeper:2181"
  tsd.storage.hbase.zk_quorum:
  tsd.core.auto_create_metrics: true
  tsd.core.auto_create_tagks: true
  tsd.core.auto_create_tagvs: true
  # tsd.storage.hbase.data_table: tsdb
  # tsd.storage.hbase.meta_table: tsdb-meta
  # tsd.storage.hbase.tree_table: tsdb-tree
  # tsd.storage.hbase.uid_table: tsdb-uid

# logback -- configure /etc/opentsdb/logback.xml contents for more detailed logging
logback:
  level_root: "DEBUG"  # main java logger level
  level_treshold: "WARN"  # change to INFO to see more in the logs itself
  level_querylog: "WARN"
  level_hbase: "WARN"
  level_stumbleupon: "WARN"
  level_core: "INFO"
  level_graph: "INFO"
  level_meta: "INFO"
  level_search: "INFO"
  level_stats: "INFO"
  level_tools: "INFO"
  level_tree: "INFO"
  level_tsd: "INFO"
  level_conn_mgr: "WARN"
  level_graph_handler: "WARN"
  level_query: "WARN"
  level_uid: "INFO"
  level_utils: "INFO"
  pattern: "%d{ISO8601} %-5level [%thread] %logger{0}: %msg%n"

# resources -- container resource requests and limits
resources:
  requests:
    memory: "256Mi"
    cpu: "10m"
  limits:
    memory: "2048Mi"
    cpu: "1000m"

# hbase -- pass vars towards hbase chart, from dependencies
hbase:
  # hbase.enabled -- set to 'false' to disable automatically deploying dependent charts
  enabled: true
